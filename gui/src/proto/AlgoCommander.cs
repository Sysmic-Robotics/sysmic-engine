// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: algo_commander.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AlgoCommander {

  /// <summary>Holder for reflection information generated from algo_commander.proto</summary>
  public static partial class AlgoCommanderReflection {

    #region Descriptor
    /// <summary>File descriptor for algo_commander.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AlgoCommanderReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRhbGdvX2NvbW1hbmRlci5wcm90bxIOYWxnb19jb21tYW5kZXIiWwoNUm9i",
            "b3RQb3NpdGlvbhIKCgJpZBgBIAEoBRINCgVwb3NfeBgCIAEoAhINCgVwb3Nf",
            "eRgDIAEoAhINCgVhbmdsZRgEIAEoAhIRCglibHVlX3RlYW0YBSABKAgiIAoI",
            "VmVjdG9yMmYSCQoBeBgBIAEoAhIJCgF5GAIgASgCIlYKBVJvdXRlEigKBnBv",
            "aW50cxgBIAMoCzIYLmFsZ29fY29tbWFuZGVyLlZlY3RvcjJmEhAKCHJvYm90",
            "X2lkGAIgASgFEhEKCWJsdWVfdGVhbRgDIAEoCCKNAQoOV3JhcHBlck1lc3Nh",
            "Z2USEwoLY29tbW9uRmllbGQYASABKAMSNwoOcm9ib3RfcG9zaXRpb24YAiAB",
            "KAsyHS5hbGdvX2NvbW1hbmRlci5Sb2JvdFBvc2l0aW9uSAASJgoFcm91dGUY",
            "AyABKAsyFS5hbGdvX2NvbW1hbmRlci5Sb3V0ZUgAQgUKA21zZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AlgoCommander.RobotPosition), global::AlgoCommander.RobotPosition.Parser, new[]{ "Id", "PosX", "PosY", "Angle", "BlueTeam" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AlgoCommander.Vector2f), global::AlgoCommander.Vector2f.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AlgoCommander.Route), global::AlgoCommander.Route.Parser, new[]{ "Points", "RobotId", "BlueTeam" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AlgoCommander.WrapperMessage), global::AlgoCommander.WrapperMessage.Parser, new[]{ "CommonField", "RobotPosition", "Route" }, new[]{ "Msg" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RobotPosition : pb::IMessage<RobotPosition> {
    private static readonly pb::MessageParser<RobotPosition> _parser = new pb::MessageParser<RobotPosition>(() => new RobotPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AlgoCommander.AlgoCommanderReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotPosition(RobotPosition other) : this() {
      id_ = other.id_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      angle_ = other.angle_;
      blueTeam_ = other.blueTeam_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotPosition Clone() {
      return new RobotPosition(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 2;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 3;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 4;
    private float angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "blue_team" field.</summary>
    public const int BlueTeamFieldNumber = 5;
    private bool blueTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BlueTeam {
      get { return blueTeam_; }
      set {
        blueTeam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
      if (BlueTeam != other.BlueTeam) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
      if (BlueTeam != false) hash ^= BlueTeam.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (PosX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PosY);
      }
      if (Angle != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Angle);
      }
      if (BlueTeam != false) {
        output.WriteRawTag(40);
        output.WriteBool(BlueTeam);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (Angle != 0F) {
        size += 1 + 4;
      }
      if (BlueTeam != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotPosition other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      if (other.BlueTeam != false) {
        BlueTeam = other.BlueTeam;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 21: {
            PosX = input.ReadFloat();
            break;
          }
          case 29: {
            PosY = input.ReadFloat();
            break;
          }
          case 37: {
            Angle = input.ReadFloat();
            break;
          }
          case 40: {
            BlueTeam = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector2f : pb::IMessage<Vector2f> {
    private static readonly pb::MessageParser<Vector2f> _parser = new pb::MessageParser<Vector2f>(() => new Vector2f());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector2f> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AlgoCommander.AlgoCommanderReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2f() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2f(Vector2f other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2f Clone() {
      return new Vector2f(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector2f);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector2f other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector2f other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Route : pb::IMessage<Route> {
    private static readonly pb::MessageParser<Route> _parser = new pb::MessageParser<Route>(() => new Route());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Route> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AlgoCommander.AlgoCommanderReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route(Route other) : this() {
      points_ = other.points_.Clone();
      robotId_ = other.robotId_;
      blueTeam_ = other.blueTeam_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route Clone() {
      return new Route(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AlgoCommander.Vector2f> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::AlgoCommander.Vector2f.Parser);
    private readonly pbc::RepeatedField<global::AlgoCommander.Vector2f> points_ = new pbc::RepeatedField<global::AlgoCommander.Vector2f>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AlgoCommander.Vector2f> Points {
      get { return points_; }
    }

    /// <summary>Field number for the "robot_id" field.</summary>
    public const int RobotIdFieldNumber = 2;
    private int robotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RobotId {
      get { return robotId_; }
      set {
        robotId_ = value;
      }
    }

    /// <summary>Field number for the "blue_team" field.</summary>
    public const int BlueTeamFieldNumber = 3;
    private bool blueTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BlueTeam {
      get { return blueTeam_; }
      set {
        blueTeam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Route);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Route other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!points_.Equals(other.points_)) return false;
      if (RobotId != other.RobotId) return false;
      if (BlueTeam != other.BlueTeam) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= points_.GetHashCode();
      if (RobotId != 0) hash ^= RobotId.GetHashCode();
      if (BlueTeam != false) hash ^= BlueTeam.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      points_.WriteTo(output, _repeated_points_codec);
      if (RobotId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RobotId);
      }
      if (BlueTeam != false) {
        output.WriteRawTag(24);
        output.WriteBool(BlueTeam);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      if (RobotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RobotId);
      }
      if (BlueTeam != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Route other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      if (other.RobotId != 0) {
        RobotId = other.RobotId;
      }
      if (other.BlueTeam != false) {
        BlueTeam = other.BlueTeam;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
          case 16: {
            RobotId = input.ReadInt32();
            break;
          }
          case 24: {
            BlueTeam = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WrapperMessage : pb::IMessage<WrapperMessage> {
    private static readonly pb::MessageParser<WrapperMessage> _parser = new pb::MessageParser<WrapperMessage>(() => new WrapperMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WrapperMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AlgoCommander.AlgoCommanderReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WrapperMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WrapperMessage(WrapperMessage other) : this() {
      commonField_ = other.commonField_;
      switch (other.MsgCase) {
        case MsgOneofCase.RobotPosition:
          RobotPosition = other.RobotPosition.Clone();
          break;
        case MsgOneofCase.Route:
          Route = other.Route.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WrapperMessage Clone() {
      return new WrapperMessage(this);
    }

    /// <summary>Field number for the "commonField" field.</summary>
    public const int CommonFieldFieldNumber = 1;
    private long commonField_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommonField {
      get { return commonField_; }
      set {
        commonField_ = value;
      }
    }

    /// <summary>Field number for the "robot_position" field.</summary>
    public const int RobotPositionFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AlgoCommander.RobotPosition RobotPosition {
      get { return msgCase_ == MsgOneofCase.RobotPosition ? (global::AlgoCommander.RobotPosition) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RobotPosition;
      }
    }

    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AlgoCommander.Route Route {
      get { return msgCase_ == MsgOneofCase.Route ? (global::AlgoCommander.Route) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Route;
      }
    }

    private object msg_;
    /// <summary>Enum of possible cases for the "msg" oneof.</summary>
    public enum MsgOneofCase {
      None = 0,
      RobotPosition = 2,
      Route = 3,
    }
    private MsgOneofCase msgCase_ = MsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOneofCase MsgCase {
      get { return msgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msgCase_ = MsgOneofCase.None;
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WrapperMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WrapperMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommonField != other.CommonField) return false;
      if (!object.Equals(RobotPosition, other.RobotPosition)) return false;
      if (!object.Equals(Route, other.Route)) return false;
      if (MsgCase != other.MsgCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CommonField != 0L) hash ^= CommonField.GetHashCode();
      if (msgCase_ == MsgOneofCase.RobotPosition) hash ^= RobotPosition.GetHashCode();
      if (msgCase_ == MsgOneofCase.Route) hash ^= Route.GetHashCode();
      hash ^= (int) msgCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CommonField != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CommonField);
      }
      if (msgCase_ == MsgOneofCase.RobotPosition) {
        output.WriteRawTag(18);
        output.WriteMessage(RobotPosition);
      }
      if (msgCase_ == MsgOneofCase.Route) {
        output.WriteRawTag(26);
        output.WriteMessage(Route);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CommonField != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommonField);
      }
      if (msgCase_ == MsgOneofCase.RobotPosition) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RobotPosition);
      }
      if (msgCase_ == MsgOneofCase.Route) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Route);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WrapperMessage other) {
      if (other == null) {
        return;
      }
      if (other.CommonField != 0L) {
        CommonField = other.CommonField;
      }
      switch (other.MsgCase) {
        case MsgOneofCase.RobotPosition:
          if (RobotPosition == null) {
            RobotPosition = new global::AlgoCommander.RobotPosition();
          }
          RobotPosition.MergeFrom(other.RobotPosition);
          break;
        case MsgOneofCase.Route:
          if (Route == null) {
            Route = new global::AlgoCommander.Route();
          }
          Route.MergeFrom(other.Route);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CommonField = input.ReadInt64();
            break;
          }
          case 18: {
            global::AlgoCommander.RobotPosition subBuilder = new global::AlgoCommander.RobotPosition();
            if (msgCase_ == MsgOneofCase.RobotPosition) {
              subBuilder.MergeFrom(RobotPosition);
            }
            input.ReadMessage(subBuilder);
            RobotPosition = subBuilder;
            break;
          }
          case 26: {
            global::AlgoCommander.Route subBuilder = new global::AlgoCommander.Route();
            if (msgCase_ == MsgOneofCase.Route) {
              subBuilder.MergeFrom(Route);
            }
            input.ReadMessage(subBuilder);
            Route = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
