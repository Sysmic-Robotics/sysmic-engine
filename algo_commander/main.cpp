#include <SFML/Graphics.hpp>
#include <iostream>
#include <thread>

#include "packet_receiver.hpp"
#include "packet_handler.hpp"
#include "field.hpp"
#include "robot_handler.hpp"
#include "route_handler.hpp"

std::vector<float> convert_to_local_coords(float global_x, float global_y){

            // Comprimir el espacio
            float local_x =  (global_x*config::window_wide)/((config::ROBOCUP_LONG)*1000);
            float local_y = (global_y*config::window_long)/((config::ROBOCUP_WIDE)*1000);
            local_y = local_y*-1; // reflection
            local_x += config::window_wide/2;
            local_y += config::window_long/2;

            std::vector<float> local_coords(2); 
            local_coords[0] = local_x;
            local_coords[1] = local_y;
            return local_coords;
}

// Main loop
int main(){
    sf::RenderWindow window =  sf::RenderWindow (sf::VideoMode(config::window_wide, config::window_long), "Robocup SSL");
    PacketReceiver packet_listener(12345);
    
    sf::Clock clock;
    // Objects
    Field field;
    RobotHandler robots;
    // Create team blue
    robots.add_robot(400,200, true);
    
    robots.add_robot(400,300, true);
    robots.add_robot(400,400, true);
    robots.add_robot(400,500, true);
    robots.add_robot(400,600, true);
    robots.add_robot(400,700, true);

    // Create team yellow
    robots.add_robot(1000,200, false);
    robots.add_robot(1000,300, false);
    robots.add_robot(1000,400, false);
    robots.add_robot(1000,500, false);
    robots.add_robot(1000,600, false);
    robots.add_robot(1000,700, false);
    
    RouteHandler route_handler;
    PacketHandler packet_handler(&robots, &route_handler);
    std::vector<sf::Vector2f> waypoints = {
        {-3.541473388992017, 9.975360201834974}, 
        {-27.96690999886232, -33.65259008713929}, 
        {14.835112562112954, -59.498031942323905},
         {26.931658033331587, -108.01270588395482}, 
         {39.59346516367896, -156.3829306115067}, 
         {23.523625622404325, -203.73016133430292}, 
         {49.75564834573288, -246.29635665221667}, 
         {59.65641067023353, -295.30630365681736},
          {52.18359813046209, -344.74472062930363}, 
          {101.25750246437656, -354.3234425391297}, 
          {150.58272269404733, -362.5101787199583}, 
          {169.16632570844467, -408.92838311223613},
           {189.87227153709136, -454.43952248866935}, 
           {209.14822670725607, -500.57451519786764},
            {252.68564948936273, -525.1609508381166}, 
            {291.9809822229927, -556.0782085650453}, 
            {336.9424355573601, -577.9521134304664},
             {386.5845587900858, -583.923679468523}, 
             {414.98466680342244, -625.0750326033931}, {464.9293712799981, -627.4258823960349}, {494.69775427496097, -667.5985518849448}, {543.7892632432649, -677.0866363710193}, {592.1672516287035, -664.454524917332}, {631.2314960146377, -695.6632546344485}, {664.8304514583688, -732.6917597769761}, {713.0845363413564, -745.7892134266531}, {756.3898156806708, -720.7961587645282}, {800.935234407023, -743.505312656604}, {826.2881274935853, -786.6009135010218}, {860.6562146590486, -822.9166757068069}, {896.7950123569026, -857.4707970377503}, {945.9930778207618, -866.3898975873453}, {995.4193685260225, -873.9424989351651}, {1043.0582489457984, -889.1259462496018}, {1051.917716593758, -938.3347852218308}, {1089.230058377164, -971.6182518477444}, {1101.752862754398, -1020.0246498807478}, {1150.8712941605663, -1029.372360627105}, {1198.5884104965007, -1044.3081166703364}, {1229.6131972921257, -1083.5186076681039}, {1278.86058158975, -1074.8759726623844}, {1307.8136066929346, -1115.6402013117086}, {1345.8531195209107, -1148.0900928956603}, {1386.7803907152293, -1176.8121832197767}, {1427.7750953490195, -1148.1864222344639}, {1475.0818616612823, -1131.9978503061898}, {1523.3235022442914, -1118.8546347993301}, {1573.3234422959276, -1118.9320611048329}, {1614.0696883562123, -1147.910388040575}, {1602.6334617949433, -1196.584947330201}, {1638.7291379788585, -1231.1841114938902}, {1672.0145067350086, -1268.494756446331}, {1688.9314821071775, -1315.5459620021659}, {1712.9704783510979, -1359.3880269579224}, {1752.1361743438028, -1390.469343812377}, {1796.2874603733353, -1413.9355736318098}, {1844.9242502262296, -1425.5313777352528}, {1891.9687392524966, -1442.4670221651966}, {1916.8033685830414, -1485.8633490375762}, {1964.1485542007913, -1501.9392128968166}, {2013.4633103301849, -1493.6896778857708}, {2050.392376837268, -1527.3978971640934}, {2090.489754589358, -1557.2676192486083}, {2105.597162641752, -1604.9306680593847}, {2155.581959940403, -1606.1635666816355}, {2203.287911089951, -1621.134946875758}, {2251.835899247296, -1633.097089069959}, {2292.312012831794, -1662.4515474893335}, {2328.7197580756656, -1696.7221775719177}, {2364.517161963726, -1731.6298540181535}, {2379.3272257377284, -1779.3861312077543}, {2404.610412787756, -1822.5226638986571}, {2444.9403375459515, -1852.0776494171498}, {2483.6360087042185, -1883.7422200539243}, {2533.0007204343146, -1891.6873591845192}, {2582.906804823303, -1888.624233173527}, {2623.2680562371497, -1918.1364236091458}, {2673.2518169525774, -1919.410654648966}, {2720.318851967848, -1936.2835386606364}, {2760.0394613802546, -1966.6524897111262}
};
    

    std::vector<sf::Vector2f> points;
    for(const auto& point : waypoints) {
        std::vector<float> vec = convert_to_local_coords( point.x, point.y) ;
        points.push_back( sf::Vector2f(vec[0], vec[1]));
    }

    //route_handler.create_new_route(1,false, points);
    
    while(window.isOpen()){
        float delta_time = clock.restart().asSeconds();
        // Inputs
        sf::Event event;
        while (window.pollEvent(event)){
            if (event.type == sf::Event::Closed)
                window.close();
        }
        // Process
        std::vector<char> packets = packet_listener.get_packets();
        packet_handler.handle_packets(packets);
        robots.process(delta_time);

        // Render
        window.clear( sf::Color(128, 128, 128) );

        field.render( &window );
        robots.render(&window);
        route_handler.render(&window);
        
        window.display();
    }
    
    return 0;
}


